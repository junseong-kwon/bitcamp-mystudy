// 페이지가 완전히 로드되면 실행될 이벤트 리스너를 추가합니다.
document.addEventListener('DOMContentLoaded', () => {
    // 할 일 목록을 가져와 화면에 표시합니다.
    fetchTodos();

    // 폼 제출 시 새로운 할 일을 생성합니다.
    document.getElementById('todo-form').addEventListener('submit', (e) => {
        e.preventDefault(); // 폼 제출 시 페이지가 새로고침 되는 것을 방지합니다.
        createTodo(); // 새로운 할 일을 생성합니다.
    });
});

// 모든 할 일 목록을 가져와 화면에 표시하는 함수입니다.
function fetchTodos() {
    fetch('/api/todos') // 백엔드의 '/api/todos' 경로로 GET 요청을 보냅니다.
        .then(response => response.json()) // 응답을 JSON으로 변환합니다.
        .then(todos => {
            const todoList = document.getElementById('todo-list'); // 할 일 목록이 표시될 div 요소를 가져옵니다.
            todoList.innerHTML = ''; // 현재 표시된 목록을 지웁니다.
            // 각 할 일을 화면에 추가합니다.
            todos.forEach(todo => {
                const div = document.createElement('div');
                div.innerHTML = `
                    <h3>${todo.title}</h3>
                    <p>${todo.description}</p>
                    <button onclick="deleteTodo(${todo.id})">Delete</button>
                    <button onclick="toggleComplete(${todo.id}, ${todo.completed})">
                        ${todo.completed ? 'Uncomplete' : 'Complete'}
                    </button>
                `;
                todoList.appendChild(div); // 할 일을 목록에 추가합니다.
            });
        });
}

// 새로운 할 일을 생성하는 함수입니다.
function createTodo() {
    const title = document.getElementById('title').value; // 폼에서 제목을 가져옵니다.
    const description = document.getElementById('description').value; // 폼에서 설명을 가져옵니다.

    // 백엔드의 '/api/todos' 경로로 POST 요청을 보냅니다.
    fetch('/api/todos', {
        method: 'POST', // HTTP 메서드를 POST로 설정합니다.
        headers: {
            'Content-Type': 'application/json', // JSON 형식으로 데이터를 보냅니다.
        },
        body: JSON.stringify({ title, description, completed: false }), // 요청 본문에 할 일 데이터를 JSON 형식으로 추가합니다.
    }).then(() => {
        fetchTodos(); // 할 일을 추가한 후, 목록을 다시 가져와 갱신합니다.
        document.getElementById('todo-form').reset(); // 폼을 초기화합니다.
    });
}

// 할 일을 삭제하는 함수입니다.
function deleteTodo(id) {
    // 백엔드의 '/api/todos/{id}' 경로로 DELETE 요청을 보냅니다.
    fetch(`/api/todos/${id}`, { method: 'DELETE' })
        .then(() => fetchTodos()); // 삭제한 후, 목록을 다시 가져와 갱신합니다.
}

// 할 일의 완료 상태를 토글하는 함수입니다.
function toggleComplete(id, completed) {
    // 백엔드의 '/api/todos/{id}' 경로로 PUT 요청을 보냅니다.
    fetch(`/api/todos/${id}`, {
        method: 'PUT', // HTTP 메서드를 PUT으로 설정합니다.
        headers: {
            'Content-Type': 'application/json', // JSON 형식으로 데이터를 보냅니다.
        },
        // 완료 상태를 반대로 변경하여 요청 본문에 추가합니다.
        body: JSON.stringify({ completed: !completed }),
    }).then(() => fetchTodos()); // 상태를 변경한 후, 목록을 다시 가져와 갱신합니다.
}
